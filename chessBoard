#Walidator Słownika Szachowego
#W tym rozdziale użyliśmy słownika {'1h': 'bking', '6c': 'wqueen', '2g': 'bbishop', '5h': 'bqueen', '3e': 'wking'}, aby przedstawić szachownicę. Napisz funkcję o nazwie isValidChessBoard(), która przyjmuje argument w postaci słownika i zwraca True lub False w zależności od tego, czy szachownica jest poprawna.

#Poprawna szachownica musi spełniać następujące warunki:

#Dokładnie jeden czarny król i dokładnie jeden biały król.
#Każdy gracz może mieć maksymalnie 16 figur.
#Każdy gracz może mieć maksymalnie 8 pionków.
#Wszystkie figury muszą znajdować się na poprawnych polach od '1a' do '8h'; czyli żadna figura nie może znajdować się na polu '9z'.
#Nazwy figur muszą zaczynać się od 'w' lub 'b', co oznacza odpowiednio białą lub czarną figurę, a następnie muszą zawierać jedno z wyrazów: 'pawn', 'knight', 'bishop', 'rook', 'queen' lub 'king'.
#Funkcja powinna wykrywać, kiedy błąd spowodował niepoprawną szachownicę.

#Wyjaśnienie zadania
#Masz napisać funkcję, która sprawdzi, czy dany słownik poprawnie reprezentuje stan szachownicy zgodnie z wymienionymi zasadami. Oto jak podejść do tego zadania krok po kroku:

#Sprawdzenie królów:

#Upewnij się, że na szachownicy jest dokładnie jeden czarny król ('bking') i jeden biały król ('wking').
#Sprawdzenie liczby figur:

#Policz figury każdego gracza (czarne i białe) i upewnij się, że każda grupa ma nie więcej niż 16 figur.
#Sprawdzenie liczby pionków:

#Policz pionki ('wpawn' i 'bpawn') i upewnij się, że każdy gracz ma nie więcej niż 8 pionków.
#Sprawdzenie poprawności pól:

#Upewnij się, że wszystkie figury znajdują się na poprawnych polach od '1a' do '8h'.
#Sprawdzenie poprawności nazw figur:

#Upewnij się, że nazwy figur zaczynają się od 'w' lub 'b' i są zgodne z jednym z dozwolonych typów figur.
#Implementacja w Pythonie
#Oto przykładowa implementacja funkcji isValidChessBoard():

def isValidChessBoard(board):
    piece_count = {'w': 0, 'b': 0}
    pawn_count = {'w': 0, 'b': 0}
    king_count = {'wking': 0, 'bking': 0}
    valid_positions = {f'{r}{c}' for r in '12345678' for c in 'abcdefgh'}
    valid_pieces = {'pawn', 'knight', 'bishop', 'rook', 'queen', 'king'}

    for pos, piece in board.items():
        if pos not in valid_positions or len(piece) < 5 or piece[0] not in 'wb' or piece[1:] not in valid_pieces:
            return False
        
        color = piece[0]
        piece_type = piece[1:]
        piece_count[color] += 1
        
        if piece_type == 'pawn':
            pawn_count[color] += 1
        
        if piece in king_count:
            king_count[piece] += 1

    if king_count['wking'] != 1 or king_count['bking'] != 1:
        return False
    if piece_count['w'] > 16 or piece_count['b'] > 16:
        return False
    if pawn_count['w'] > 8 or pawn_count['b'] > 8:
        return False

    return True

#Wyjaśnienie uproszczeń
#Użycie zestawu do walidacji pozycji:

#valid_positions zawiera wszystkie prawidłowe pozycje na szachownicy, co ułatwia ich sprawdzenie.
#Skondensowane sprawdzenie poprawności figur:

#Sprawdzamy jednocześnie długość nazwy figury, jej kolor i typ za pomocą jednego warunku if.
#Prostsze liczenie królów, pionków i wszystkich figur:

#piece_count przechowuje liczbę wszystkich figur dla każdego koloru.
#pawn_count przechowuje liczbę pionków dla każdego koloru.
#king_count przechowuje liczbę królów dla każdego koloru.
#Sprawdzenie warunków końcowych:

#Sprawdzamy, czy liczba królów jest dokładnie jeden dla każdego koloru.
#Sprawdzamy, czy liczba figur nie przekracza 16 dla każdego koloru.
#Sprawdzamy, czy liczba pionków nie przekracza 8 dla każdego koloru.
#Ta uproszczona wersja funkcji jest łatwiejsza do zrozumienia i utrzymania, jednocześnie spełniając wszystkie wymogi zadania.



#Inwentarz gry fantasy

#Tworzysz grę wideo fantasy. Struktura danych do modelowania inwentarza gracza będzie słownikiem, gdzie kluczami są ciągi znaków opisujące przedmioty w inwentarzu, a wartościami są liczby całkowite określające, ile danego przedmiotu gracz posiada. Na przykład, słownik {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12} oznacza, że gracz ma 1 linę, 6 pochodni, 42 złote monety i tak dalej.

#Napisz funkcję o nazwie displayInventory(), która przyjmuje dowolny możliwy "inwentarz" i wyświetla go w następujący sposób:


# inventory.py

stuff = {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}

def displayInventory(inventory):
    print("Inventory:")
    item_total = 0
    for item, count in inventory.items():
        print(f"{count} {item}")
        item_total += count
    print("Total number of items: " + str(item_total))

displayInventory(stuff)


#Inicjalizacja zmiennych:

#item_total służy do zliczania łącznej liczby przedmiotów w inwentarzu.
#Pętla for:

#Przechodzimy przez wszystkie klucze i wartości w słowniku inventory za pomocą for item, count in inventory.items():.
#W każdej iteracji drukujemy liczbę przedmiotów (count) oraz nazwę przedmiotu (item) za pomocą print(f"{count} {item}").
#Dodajemy liczbę przedmiotów (count) do item_total, aby uzyskać łączną liczbę wszystkich przedmiotów.
#Wyświetlenie łącznej liczby przedmiotów:

#Po zakończeniu pętli drukujemy łączną liczbę wszystkich przedmiotów za pomocą print("Total number of items: " + str(item_total)).
#Ta implementacja jest prosta i efektywna, pokazując jak przetworzyć i wyświetlić zawartość słownika reprezentującego inwentarz gracza w grze fantasy.

#Wyjaśnienie kodu
#Deklaracja słownika stuff:

#stuff zawiera przykładowy inwentarz gracza z przedmiotami oraz ich ilościami.
#Definicja funkcji displayInventory(inventory):

#Funkcja przyjmuje jeden argument inventory, który powinien być słownikiem zawierającym przedmioty oraz ich ilości.
#Wyświetlanie inwentarza:

#Funkcja rozpoczyna od wydrukowania nagłówka "Inventory:".
#Inicjalizuje zmienną item_total jako 0, która będzie służyła do zliczania łącznej liczby wszystkich przedmiotów.
#Pętla for:

#Pętla przechodzi przez wszystkie klucze (item) i wartości (count) w słowniku inventory.
#W każdej iteracji drukuje ilość (count) oraz nazwę przedmiotu (item) w formacie "{count} {item}".
#Dodaje ilość przedmiotów do item_total.
#Wyświetlenie łącznej liczby przedmiotów:

#Po zakończeniu pętli drukuje łączną liczbę wszystkich przedmiotów w formacie "Total number of items: " + item_total.

stuff = {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}

def displayInventory(inventory):
    print("Inventory:")
    item_total = 0
    for item, count in inventory.items():
        print(f"{count} {item}")
        item_total += count
    print("Total number of items: " + str(item_total))

displayInventory(stuff)








